/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package tw.maple.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClassDefine implements org.apache.thrift.TBase<ClassDefine, ClassDefine._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClassDefine");

  private static final org.apache.thrift.protocol.TField HAS_ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("has_attr", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_BASECLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_baseclass", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("has_interface", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_STMT_FIELD_DESC = new org.apache.thrift.protocol.TField("has_stmt", org.apache.thrift.protocol.TType.BOOL, (short)4);

  public boolean has_attr;
  public boolean has_baseclass;
  public boolean has_interface;
  public boolean has_stmt;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_ATTR((short)1, "has_attr"),
    HAS_BASECLASS((short)2, "has_baseclass"),
    HAS_INTERFACE((short)3, "has_interface"),
    HAS_STMT((short)4, "has_stmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_ATTR
          return HAS_ATTR;
        case 2: // HAS_BASECLASS
          return HAS_BASECLASS;
        case 3: // HAS_INTERFACE
          return HAS_INTERFACE;
        case 4: // HAS_STMT
          return HAS_STMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HAS_ATTR_ISSET_ID = 0;
  private static final int __HAS_BASECLASS_ISSET_ID = 1;
  private static final int __HAS_INTERFACE_ISSET_ID = 2;
  private static final int __HAS_STMT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_ATTR, new org.apache.thrift.meta_data.FieldMetaData("has_attr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_BASECLASS, new org.apache.thrift.meta_data.FieldMetaData("has_baseclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("has_interface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_STMT, new org.apache.thrift.meta_data.FieldMetaData("has_stmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClassDefine.class, metaDataMap);
  }

  public ClassDefine() {
  }

  public ClassDefine(
    boolean has_attr,
    boolean has_baseclass,
    boolean has_interface,
    boolean has_stmt)
  {
    this();
    this.has_attr = has_attr;
    setHas_attrIsSet(true);
    this.has_baseclass = has_baseclass;
    setHas_baseclassIsSet(true);
    this.has_interface = has_interface;
    setHas_interfaceIsSet(true);
    this.has_stmt = has_stmt;
    setHas_stmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClassDefine(ClassDefine other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.has_attr = other.has_attr;
    this.has_baseclass = other.has_baseclass;
    this.has_interface = other.has_interface;
    this.has_stmt = other.has_stmt;
  }

  public ClassDefine deepCopy() {
    return new ClassDefine(this);
  }

  @Override
  public void clear() {
    setHas_attrIsSet(false);
    this.has_attr = false;
    setHas_baseclassIsSet(false);
    this.has_baseclass = false;
    setHas_interfaceIsSet(false);
    this.has_interface = false;
    setHas_stmtIsSet(false);
    this.has_stmt = false;
  }

  public boolean isHas_attr() {
    return this.has_attr;
  }

  public ClassDefine setHas_attr(boolean has_attr) {
    this.has_attr = has_attr;
    setHas_attrIsSet(true);
    return this;
  }

  public void unsetHas_attr() {
    __isset_bit_vector.clear(__HAS_ATTR_ISSET_ID);
  }

  /** Returns true if field has_attr is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_attr() {
    return __isset_bit_vector.get(__HAS_ATTR_ISSET_ID);
  }

  public void setHas_attrIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_ATTR_ISSET_ID, value);
  }

  public boolean isHas_baseclass() {
    return this.has_baseclass;
  }

  public ClassDefine setHas_baseclass(boolean has_baseclass) {
    this.has_baseclass = has_baseclass;
    setHas_baseclassIsSet(true);
    return this;
  }

  public void unsetHas_baseclass() {
    __isset_bit_vector.clear(__HAS_BASECLASS_ISSET_ID);
  }

  /** Returns true if field has_baseclass is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_baseclass() {
    return __isset_bit_vector.get(__HAS_BASECLASS_ISSET_ID);
  }

  public void setHas_baseclassIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_BASECLASS_ISSET_ID, value);
  }

  public boolean isHas_interface() {
    return this.has_interface;
  }

  public ClassDefine setHas_interface(boolean has_interface) {
    this.has_interface = has_interface;
    setHas_interfaceIsSet(true);
    return this;
  }

  public void unsetHas_interface() {
    __isset_bit_vector.clear(__HAS_INTERFACE_ISSET_ID);
  }

  /** Returns true if field has_interface is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_interface() {
    return __isset_bit_vector.get(__HAS_INTERFACE_ISSET_ID);
  }

  public void setHas_interfaceIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_INTERFACE_ISSET_ID, value);
  }

  public boolean isHas_stmt() {
    return this.has_stmt;
  }

  public ClassDefine setHas_stmt(boolean has_stmt) {
    this.has_stmt = has_stmt;
    setHas_stmtIsSet(true);
    return this;
  }

  public void unsetHas_stmt() {
    __isset_bit_vector.clear(__HAS_STMT_ISSET_ID);
  }

  /** Returns true if field has_stmt is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_stmt() {
    return __isset_bit_vector.get(__HAS_STMT_ISSET_ID);
  }

  public void setHas_stmtIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_STMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HAS_ATTR:
      if (value == null) {
        unsetHas_attr();
      } else {
        setHas_attr((Boolean)value);
      }
      break;

    case HAS_BASECLASS:
      if (value == null) {
        unsetHas_baseclass();
      } else {
        setHas_baseclass((Boolean)value);
      }
      break;

    case HAS_INTERFACE:
      if (value == null) {
        unsetHas_interface();
      } else {
        setHas_interface((Boolean)value);
      }
      break;

    case HAS_STMT:
      if (value == null) {
        unsetHas_stmt();
      } else {
        setHas_stmt((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_ATTR:
      return new Boolean(isHas_attr());

    case HAS_BASECLASS:
      return new Boolean(isHas_baseclass());

    case HAS_INTERFACE:
      return new Boolean(isHas_interface());

    case HAS_STMT:
      return new Boolean(isHas_stmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HAS_ATTR:
      return isSetHas_attr();
    case HAS_BASECLASS:
      return isSetHas_baseclass();
    case HAS_INTERFACE:
      return isSetHas_interface();
    case HAS_STMT:
      return isSetHas_stmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClassDefine)
      return this.equals((ClassDefine)that);
    return false;
  }

  public boolean equals(ClassDefine that) {
    if (that == null)
      return false;

    boolean this_present_has_attr = true;
    boolean that_present_has_attr = true;
    if (this_present_has_attr || that_present_has_attr) {
      if (!(this_present_has_attr && that_present_has_attr))
        return false;
      if (this.has_attr != that.has_attr)
        return false;
    }

    boolean this_present_has_baseclass = true;
    boolean that_present_has_baseclass = true;
    if (this_present_has_baseclass || that_present_has_baseclass) {
      if (!(this_present_has_baseclass && that_present_has_baseclass))
        return false;
      if (this.has_baseclass != that.has_baseclass)
        return false;
    }

    boolean this_present_has_interface = true;
    boolean that_present_has_interface = true;
    if (this_present_has_interface || that_present_has_interface) {
      if (!(this_present_has_interface && that_present_has_interface))
        return false;
      if (this.has_interface != that.has_interface)
        return false;
    }

    boolean this_present_has_stmt = true;
    boolean that_present_has_stmt = true;
    if (this_present_has_stmt || that_present_has_stmt) {
      if (!(this_present_has_stmt && that_present_has_stmt))
        return false;
      if (this.has_stmt != that.has_stmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClassDefine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClassDefine typedOther = (ClassDefine)other;

    lastComparison = Boolean.valueOf(isSetHas_attr()).compareTo(typedOther.isSetHas_attr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_attr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_attr, typedOther.has_attr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_baseclass()).compareTo(typedOther.isSetHas_baseclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_baseclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_baseclass, typedOther.has_baseclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_interface()).compareTo(typedOther.isSetHas_interface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_interface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_interface, typedOther.has_interface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_stmt()).compareTo(typedOther.isSetHas_stmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_stmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_stmt, typedOther.has_stmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HAS_ATTR
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.has_attr = iprot.readBool();
            setHas_attrIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HAS_BASECLASS
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.has_baseclass = iprot.readBool();
            setHas_baseclassIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HAS_INTERFACE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.has_interface = iprot.readBool();
            setHas_interfaceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HAS_STMT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.has_stmt = iprot.readBool();
            setHas_stmtIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(HAS_ATTR_FIELD_DESC);
    oprot.writeBool(this.has_attr);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HAS_BASECLASS_FIELD_DESC);
    oprot.writeBool(this.has_baseclass);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HAS_INTERFACE_FIELD_DESC);
    oprot.writeBool(this.has_interface);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HAS_STMT_FIELD_DESC);
    oprot.writeBool(this.has_stmt);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClassDefine(");
    boolean first = true;

    sb.append("has_attr:");
    sb.append(this.has_attr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_baseclass:");
    sb.append(this.has_baseclass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_interface:");
    sb.append(this.has_interface);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_stmt:");
    sb.append(this.has_stmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

