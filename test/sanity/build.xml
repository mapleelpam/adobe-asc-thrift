<?xml version="1.0"?>

<!-- 

Smoke test for asc.exe

Usage:

1/ Anyone who changes code to the asc code base should run
   this smoke test before they checkin, and after they
   pull a fresh copy of the source tree to verify the result
   of the checkin.
2/ Anyone testing the compiler should run these tests against 
   the asc/avmplus pair they intend to use

Setup:

1/ Copy asc.exe into the ./bin directory (e.g. /as/asc/bin).
   By default, the java shell (asc.exe) is in this directory.
2/ If you are testing the java version, make sure that the
   configuration file, jvm.config is setup properly. See
   the comments in that file for further instructions.
3/ Copy into the ./bin directory the avmplus.exe that you 
   want to test the compiler against. By default, the version
   of the avmplus.exe that the last dev to checkin is in that
   directory.

Running:

1/ Make ./test/sanity your current shell directory
2/ Execute ant
3/ Any regressions will be indicated in the differences in
   the diff.out file in the ./sanity directory.
  
Care and feeding:

1/ Add any tests that exercises the compiler
   in a unique way. Consider adding tests that exercise the core
   objects (e.g. Date) to the standalone avmplus smoke tests (tbd) 
   and/or the player integrated avmplus smoke tests, rather than here
2/ Keep the tests simple so that they can be easily maintained. Since
   we diff the log files, they do not have to print "Pass" or "Fail"
   strings, but it should be clear from the output what has broken.
3/ Avoid printing any configuration or performance dependent output
   to a log file
3/ Add the .as file to the ./tests directory, and the .as and .log
   files to the ./regress directory. If you want, you can add the
   .p and .il files to the regress directory, although they are
   ignored by the diff process

Comments:

jdyer@macromedia.com

-->

<project name="asc-test" default="all" basedir=".">

<property file="build.properties"/>

<!-- test directories are relative to ./asc/test -->

<property name="root.dir" value="../.."/>
<property name="bin.dir"  value="${root.dir}/bin"/>
<property name="lib.dir"  value="${root.dir}/lib"/>
<property name="src.dir"  value="tests"/>
<property name="log.dir"  value="log"/>
<property name="reg.dir"  value="regress"/>

<!-- look for global/shell.abc in player dir -->
<property name="abc_lib.dir" value="../../abc"/>
<available file="${abc_lib.dir}/builtin.abc" property="global.abc" value="${abc_lib.dir}/builtin.abc"/>
<available file="${abc_lib.dir}/toplevel.abc" property="shell.abc" value="${abc_lib.dir}/toplevel.abc"/>

<!-- look for global/shell.abc in qvm dir, if present -->
<property name="qvm.dir" value="${root.dir}/../qvm"/>
<available file="${qvm.dir}/core/builtin_full.abc" property="global.abc" value="${qvm.dir}/core/builtin_full.abc"/>
<available file="${qvm.dir}/shell/shell_full.abc" property="shell.abc" value="${qvm.dir}/shell/shell_full.abc"/>

<!-- explicitly adding the .exe on the end makes it easier to coexist between cygwin and bash in the same tree -->
<condition property="asc.name" value="asc.exe" else="asc">
	<os family="windows"/>
</condition>
<condition property="avm.name" value="avmplus.exe" else="avmplus">
	<os family="windows"/>
</condition>

<!-- trick to skip es4 tests on non-es4-compliant vm's -->
<condition property="es4.pattern" value="nonmatching*.as" else="es4*.as">
	<available file="${qvm.dir}" type="dir"/>
</condition>

<echo message="global.abc is ${global.abc}"/>
<echo message="shell.abc is ${shell.abc}"/>

<property name="asc.bin"  value="${bin.dir}/${asc.name}"/>
<property name="avm.bin"  value="${bin.dir}/${avm.name}"/>
<property name="avm.args" value=""/>
<echo message="asc.bin is ${asc.bin}"/>
<echo message="avm.bin is ${avm.bin}"/>

<target name="all" depends="first"/>

<!-- use "ant first" to validate the current version of asc.exe in the ./bin directory -->
<!-- use "ant compare" to compare the java version to the cpp version -->

<!-- use "ant java" is used by autobuild -->

<target name="compare" depends="first,second"/>
<target name="first" depends="initialize_first,parser_first,compiler_first,dash_in_first,runtime_first,finalize_first"/>
<target name="second" depends="initialize_second,parser_second,compiler_second,dash_in_second,finalize_second"/>
<target name="run" depends="runtime_first,finalize_first"/>

<target name="java" depends="initialize_first,parser_first,compiler_first,dash_in_first,finalize_second"/>

<target name="initialize_first">
    <delete>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>
    <mkdir dir="${log.dir}"/>
</target>

<target name="clean" >
	<delete>
		<fileset dir="${src.dir}" includes="*.il,*.out,*.abc,*.p,*.log" />
	</delete>
    <delete dir="${log.dir}" />
    <delete file="diff.out" />
    <delete file="build.out" />
	<delete>
		<fileset dir="." includes="*.suo,*.dmp,*.sln" />
	</delete>
</target>
		
<target name="parser_first">
    <!-- Test parser -->
    <delete>
        <fileset dir="${src.dir}" includes="**/*.p"/>
        <fileset dir="${log.dir}" includes="**/*.p"/>
        <fileset dir="${log.dir}" includes="**/*.p"/>
        <fileset dir="${log.dir}" includes="**/*.log"/>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <arg line="-p"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="**/*.es,**/*.as" excludes="playerglobal.as,t.as,shell.as,shellASC.as,decimal1.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.p"/>
    </copy>
    <copy file="build.out" tofile="${log.dir}/1.out"/>
</target>

<target name="compiler_first">
    <delete>
        <fileset dir="${src.dir}" includes="**/*.il"/>
        <fileset dir="${src.dir}" includes="**/*.abc"/>
        <fileset dir="${log.dir}" includes="**/*.il"/>
        <fileset dir="${log.dir}" includes="**/*.abc"/>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>

	<!-- most of the tests are one-file tests -->
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <!-- <arg line="-i -m -optimize"/> -->
        <arg line="-i -m -strict"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <fileset dir="${src.dir}" includes="**/*.es,**/*.as" excludes="asDoc.as,b116702.as,b114774.as,b113887.as,b111951.as,b111679.as,b111651.as,b111262.as,b108798.as,
																		b118175.as,b120414.as,b120414_unix.as,b120429.as,b120429_unix.as,b120430.as,b120430_unix.as,
																		b120523.as,b120524.as,b120576.as,b124435.as,b124561.as,b127559.as,b128275.as,b134359.as,b135181.as,
																		b137659.as,b147398.as,b148822.as,b149131.as,b151269.as,b151539.as,b152173.as,b153336.as,b153874.as,
																		b154869.as,b159449.as,b168157.as,proto.as,rest.as,set.as,switch.as,t2.as,unbound.as,
																		b108022.as,b107194.as,arguments2.as,arguments.as,closure.as,class1.as,call.as,boolean.as,coerce.as,
																		harnessASC.as,harness.as,get.as,forin2.as,forin.as,for_slow.as,flowConst.as,fexpr.as,exceptions.as,
																		equals.as,dynamic.as,doubleToInt.as,delete.as,constClass.as,const.as,class_ctor.as,incr.as,init.as,member.as,
																		offsetStringTests.as,metadata2.as,playerglobal.as,t.as,restarg.as,shellASC.as,shell.as,pnf.as,
																		pkg_missing.as,invalidtypeexpr.as,toStringRadix.as,plus2.as,overwrite.as,b191112.as,
																		IllegalOverride*.as,es4*.as,decimal1.as"/>
    </apply>
    
	<!-- a handful can not be compiled with -strict, due to what they are testing -->
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <!-- <arg line="-i -m -optimize"/> -->
        <arg line="-i -m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <fileset dir="${src.dir}" includes="b116702.as,b114774.as,b113887.as,b111951.as,b111679.as,b111651.as,b111262.as,b108798.as,
											b118175.as,b120414.as,b120414_unix.as,b120429.as,b120429_unix.as,b120430.as,b120430_unix.as,
											b120523.as,b120524.as,b120576.as,b124435.as,b124561.as,b127559.as,b128275.as,b134359.as,b135181.as,
											b137659.as,b147398.as,b148822.as,b149131.as,b151269.as,b151539.as,b152173.as,b153336.as,b153874.as,
											b154869.as,b159449.as,b168157.as,proto.as,rest.as,set.as,switch.as,t2.as,unbound.as,
											b108022.as,b107194.as,arguments2.as,arguments.as,closure.as,class1.as,call.as,boolean.as,coerce.as,
											harnessASC.as,harness.as,get.as,forin2.as,forin.as,for_slow.as,flowConst.as,fexpr.as,exceptions.as,
											equals.as,dynamic.as,delete.as,const.as,class_ctor.as,incr.as,init.as,member.as,
											offsetStringTests.as,metadata2.as,playerglobal.as,t.as,restarg.as,shellASC.as,shell.as,pnf.as,
											pkg_missing.as,invalidtypeexpr.as,toStringRadix.as,plus2.as,overwrite.as"/>
    </apply>

    <!-- these files need -AS3 to be compiled with -strict -->
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <!-- <arg line="-i -m -optimize"/> -->
        <arg line="-i -m -AS3 -strict"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <fileset dir="${src.dir}" includes="xml_dynamic.as,toStringRadix.as,doubleToInt.as"/>
    </apply>


    <!-- ES4 tests, need -ES4 flag -->
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <!-- <arg line="-i -m -optimize"/> -->
        <arg line="-i -m -strict -ES4 -sanity -log"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <fileset dir="${src.dir}" includes="**/${es4.pattern}" />
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/es4*.log" />
    </copy>

    <!-- Decimal tests, need -11 flag -->
    <apply executable="${asc.bin}" output="build.out" append="true" parallel="true">
        <arg line="-i -strict -11 -sanity -log"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <fileset dir="${src.dir}" includes="decimal1.as" />
    </apply>

	<!-- begin error test -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-strict -sanity -log "/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="constClass.as,class_ctor_strict.as,pnf.as,pkg_missing.as,b124583.as,b204297.as,invalidtypeexpr.as"/> <!-- b107194.as,b109751.as,b112393.as,b115412.as,b121391.as -->
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="constClass.log,class_ctor_strict.log,pnf.log,pkg_missing.log,b124583.log,b204297.log,invalidtypeexpr.log"/> <!-- b107194.log,b109751.log,b112393.log,b115412.log,b121391.log -->
    </copy>
	<!-- end error test -->

	<!-- begin metadata test - Simple test compiling with metadata on, verifies that C++ and java metadata match,
		and that it doesn't cause other problems-->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-sanity -log -md"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="metadata2.as"/> 
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="metadata2.log"/> 
    </copy>
	<!-- end metadata test -->

	<!-- begin asdoc test - Simple test compiling with asdoc on, verifies that we haven't broken anything obvious with asdoc 
	     there are apparently no automated tests for asDoc anywhere else, since it breaks often, and no one notices for weeks-->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-sanity -log -doc"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="asDoc.as"/> 
    </apply>
    <!-- Use sed to strip the sourcefile attribute value since it will differ from system to system -->
    <apply executable="sed" output="./log/asDoc.xml" >
    	<arg line="s/sourcefile=.*namespace/namespace/g"/>
    	<fileset dir="${src.dir}" includes="asDoc.xml"/>
    </apply>
	<!-- end metadata test -->

	<!-- begin illegal-override test -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideBaseOld.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideBaseNew.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideClass.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceMethod.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceGetter.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceSetter.as"/>
    </apply>
	<!-- end illegal-override test -->

	<!-- begin import order test -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="importorder_a.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_a.as"/>
        <fileset dir="${src.dir}" includes="importorder_b.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_b.as"/>
        <arg line="-import ${src.dir}/importorder_a.as"/>
        <fileset dir="${src.dir}" includes="importorder.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_b.abc"/>
        <arg line="-import ${src.dir}/importorder_a.abc"/>
        <fileset dir="${src.dir}" includes="importorder_abc.as"/>
    </apply>
	<!-- end import order test -->

	<!-- other import tests -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m -strict"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${shell.abc}"/>
        <arg line="-import ${src.dir}/b191112-import.abc"/>
        <fileset dir="${src.dir}" includes="b191112.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="bug123884-import.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/bug123884-import.as"/>
        <fileset dir="${src.dir}" includes="bug123884.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.il"/>
        <fileset dir="${src.dir}" includes="**/*.abc"/>
    </copy>
    <copy file="build.out" tofile="${log.dir}/2.out"/>
</target>

<target name="dash_in_first">
    <!-- Test parser -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-i -m"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="hello.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="hello.il"/>
        <fileset dir="${src.dir}" includes="hello.abc"/>
    </copy>
</target>

<target name="runtime_first">
    <delete>
        <fileset dir="${src.dir}" includes="**/*.log"/>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}" />
        <fileset dir="${src.dir}" includes="**/*.abc" excludes="asDoc.abc,bug123884*.abc,importorder*.abc,metadata.abc,Global.abc,t.abc,shellASC.abc,shell.abc,toplevel.abc,pnf.abc,pkg_missing.abc,b124583.abc,IllegalOverride*.abc"/>
    </apply>

	<!-- begin illegal-override tests (expected to succeed) -->
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideClass.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceMethod.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceGetter.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseOld.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceSetter.abc"/>
    </apply>
	<move todir="${src.dir}">
		<fileset dir="${src.dir}">
			<include name="**/IllegalOverride*.log"/>
			<exclude name="**/IllegalOverride*_Succ.log"/>
			<exclude name="**/IllegalOverride*_Fail.log"/>
		</fileset>
		<mapper type="glob" from="*.log" to="*_Succ.log"/>
	</move>
	<!-- end illegal-override tests (expected to succeed) -->

	<!-- begin illegal-override tests (expected to fail) -->
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseNew.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideClass.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseNew.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceMethod.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseNew.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceGetter.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/IllegalOverrideBaseNew.abc"/>
        <fileset dir="${src.dir}" includes="IllegalOverrideInterfaceSetter.abc"/>
    </apply>
	<move todir="${src.dir}">
		<fileset dir="${src.dir}">
			<include name="**/IllegalOverride*.log"/>
			<exclude name="**/IllegalOverride*_Succ.log"/>
			<exclude name="**/IllegalOverride*_Fail.log"/>
		</fileset>
		<mapper type="glob" from="*.log" to="*_Fail.log"/>
	</move>
	<!-- end illegal-override tests (expected to fail) -->

    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/importorder_a.abc"/>
        <arg line="${src.dir}/importorder_b.abc"/>
        <fileset dir="${src.dir}" includes="importorder.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/importorder_a.abc"/>
        <arg line="${src.dir}/importorder_b.abc"/>
        <fileset dir="${src.dir}" includes="importorder_abc.abc"/>
    </apply>
    <apply executable="${avm.bin}" output="build.out" append="true">
        <arg line="-log ${avm.args}"/>
        <arg line="${src.dir}/bug123884-import.abc"/>
        <fileset dir="${src.dir}" includes="bug123884.abc"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.log"/>
    </copy>
    <copy file="build.out" tofile="${log.dir}/3.out"/>
</target>

<target name="finalize_first">

    <!-- copy .as files -->

    <delete>
        <fileset dir="${log.dir}" includes="**/*.as"/>
    </delete>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.as" excludes="t.as"/>
    </copy>
    <exec executable="diff" output="diff.out">
        <arg line="--ignore-all-space"/>
        <arg line="--exclude=*.out"/>
        <arg line="--exclude=*.p"/>
        <arg line="--exclude=*.il"/>
        <arg line="--exclude=*.abc"/>
        <arg line="regress"/>
        <arg line="log"/>
    </exec>
</target>

<target name="initialize_second">
    <delete file="${bin.dir}/asc.exe"/>
    <copy file="${bin.dir}/asc.exe.j" tofile="${bin.dir}/asc.exe"/>
    <copy todir="regress">
        <fileset dir="${log.dir}" includes="**/*.p"/>
        <fileset dir="${log.dir}" includes="**/*.il"/>
        <fileset dir="${log.dir}" includes="**/*.out"/>
        <fileset dir="${log.dir}" includes="**/*.abc"/>
        <fileset dir="${log.dir}" includes="**/*.log"/>
    </copy>
</target>

<target name="parser_second">
    <!-- Test parser -->
    <delete>
        <fileset dir="${src.dir}" includes="**/*.p"/>
        <fileset dir="${log.dir}" includes="**/*.p"/>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-p"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="**/*.es,**/*.as" excludes="playerglobal.as,t.as,shellASC.as,shell.as,decimal1.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.p"/>
    </copy>
    <copy file="build.out" tofile="${log.dir}/1.out"/>
</target>

<target name="compiler_second">
    <delete>
        <fileset dir="${src.dir}" includes="**/*.il"/>
        <fileset dir="${src.dir}" includes="**/*.abc"/>
        <fileset dir="${log.dir}" includes="**/*.il"/>
        <fileset dir="${log.dir}" includes="**/*.abc"/>
	    <fileset dir="${root.dir}/test/sanity" includes="*.out"/>
    </delete>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-i -m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="**/*.es,**/*.as" excludes="bug123884*.as,importorder*.as,global.abc,metadata2.as,playerglobal.as,t.as,restarg.as,shellASC.as,shell.as,constClass.as,pnf.as,pkg_missing.as,invalidtypeexpr.as,IllegalOverride*.as"/>
    </apply>
<!-- begin error test -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-strict -sanity -log"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="constClass.as,pnf.as,pkg_missing.as,b124583.as,invalidtypeexpr.as"/> <!-- b107194.as,b109751.as,b112393.as,b115412.as,b121391.as -->
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="constClass.log,pnf.log,pkg_missing.log,b124583.log,invalidtypeexpr.log"/> <!-- b107194.log,b109751.log,b112393.log,b115412.log,b121391.log -->
    </copy>
<!-- end error test -->
<!-- begin metadata test - Simple test compiling with metadata on, verifies that C++ and java metadata match, and that it doesn't cause other problems-->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-sanity -log -md"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="metadata2.as"/> 
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="metadata2.log"/> 
    </copy>
<!-- end metadata test -->
<!-- begin import order test -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="importorder_a.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_a.as"/>
        <fileset dir="${src.dir}" includes="importorder_b.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_b.as"/>
        <arg line="-import ${src.dir}/importorder_a.as"/>
        <fileset dir="${src.dir}" includes="importorder.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/importorder_b.abc"/>
        <arg line="-import ${src.dir}/importorder_a.abc"/>
        <fileset dir="${src.dir}" includes="importorder_abc.as"/>
    </apply>
<!-- end import order test -->
<!-- other import tests -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <fileset dir="${src.dir}" includes="bug123884-import.as"/>
    </apply>
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-import ${src.dir}/bug123884-import.as"/>
        <fileset dir="${src.dir}" includes="bug123884.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.il"/>
        <fileset dir="${src.dir}" includes="**/*.abc"/>
    </copy>
    <copy file="build.out" tofile="${log.dir}/2.out"/>
</target>

<target name="dash_in_second">
    <!-- Test parser -->
    <apply executable="${asc.bin}" output="build.out" append="true">
        <arg line="-i -m"/>
        <arg line="-import ${global.abc}"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <arg line="-in ${src.dir}/hello.as"/>
        <fileset dir="${src.dir}" includes="hello.as"/>
    </apply>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="hello.il"/>
        <fileset dir="${src.dir}" includes="hello.abc"/>
    </copy>
</target>

<target name="finalize_second">

    <!-- copy .as files -->

    <delete>
        <fileset dir="${log.dir}" includes="**/*.as"/>
    </delete>
    <copy todir="log">
        <fileset dir="${src.dir}" includes="**/*.as" excludes="t.as"/>
    </copy>
    <exec executable="diff" output="diff.out">
        <arg line="--ignore-all-space"/>
        <arg line="--exclude=*.out"/>
        <arg line="--exclude=*.log"/>
        <arg line="--exclude=*.p"/>
        <arg line="--exclude=*.il"/>
        <arg line="regress"/>
        <arg line="log"/>
    </exec>
</target>

</project>
